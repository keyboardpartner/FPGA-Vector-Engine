Unit global_vars;

interface
// global part

{ $W+}                  // enable/disable warnings for this unit
// #############################################################################

//EEPROM-Routinen
uses rtc_maxim;

procedure InitVars;
function ButtonPressed:Boolean;

procedure ClearDirectory;

procedure DateTimeToDOS;
procedure TimeToParamStr;
procedure DateToParamStr;

procedure SerCRLF;

type
  tModify   = (param0, param1, param2, param3, input0, input1, input2, input3, filesel);
  tError = (NoErr, UserReq, BusyErr, FileErr, SyntaxErr, ParamErr, LockedErr, ChecksumErr);

{--------------------------------------------------------------}
const
{$TYPEDCONST OFF}

//Lineal     .----.----.----.----.----.----.----.----.----
  Vers1Str                   = '2.70 [FPGA by CM 10/2022]';    //Vers1
  Vers3Str                   = 'FPGA 2.7';    // Kurzform von Vers1

  ErrStrArr      : array[0..7] of String[8] = (
    '[OK]','[SRQUSR]','[BUSY]','[FILERR]','[CMDERR]','[PARERR]',
    '[LOCKED]','[CHKSUM]');

  FaultStrArr : array[0..3] of String[10] = (
    '[NOTFOUND]',
    '[NOCARD]',
    '[CONFERR]',
    '[WRITERR]');


  EEnotProgrammedStr         = 'EEPROM EMPTY! ';
  AdrStr                     = 'Adr ';
  ParamHintStr               = 'Param  ';
  InputHintStr               = 'Value  ';
  EvalHintStr                = 'DataAdr';
  RunStr1                    = 'BTN:STOP';
  RunStr2                    = 'INI exec';
  FileNumStr                 = ' file';
  ErrSubCh: Integer          = 255;

  CmdStrArr: array[0..13] of String[3] = (
  'STR', // 255
  'IDN', // 254
  'VAL', // 0..9999
{--------------------------------------------------------------}
// Script-Befehle
  'DIR', // 241 Dir Listing
  'FNM', // 242 FileNumber, Anzahl der Dateien
  'FNA', // 243 Data FileName (alpha)
  'FDL', // 244 Delete DataFileName (alpha)
  'FQU', // 249 File Query, OK/Exists
  'HEX', // 88  Hex-Mode bei Zahlenausgeben seriell [$12345678]
  'WEN', // 250 Write enable
  'ERC', // 251 ErrCount seit letztem Reset
  'SBD', // 252 SerBaud UBRR-Register mit U2X=1
  'REM', // 253
  'NOP');

  Cmd2SubChArr: array[0..13] of integer = (
  255, 254,
  0,
  241, 242, 243, 244, 249,
  88, 250, 251, 252, 253, 253);

  cmdAnzahl=65; // letzter Eintrag, statt tCmdwhich
  cmdErr=cmdAnzahl+1; // Error, Statt tCmdwhich

  high: Boolean = true;
  low: Boolean = false;

//Inkrementalgeber-Beschleunigungstabelle
  IncrAccArray: array[0..15] of integer = (0,1,2,5,10,25,50,100,250,
  500,1000,2500,5000,10000,10000,10000);

  IncrDigitArray: array[0..7] of LongInt = (
  $10000000,$01000000,$00100000,$00010000,
  $00001000,$00000100,$00000010,$00000001);

// Button Panel(s)
  PCA9532_0      : Byte      = $60; // Upper Voice
  PCA9532_1      : Byte      = $61; // Lower Voice
  PCA9532_2      : Byte      = $62; // Panel16 onboard
  PCA9532_3      : Byte      = $63; // ext. Panels
  PCA9532_4      : Byte      = $64;
  PCA9532_5      : Byte      = $65;
  PCA9532_6      : Byte      = $66;
  PCA9532_7      : Byte      = $67; // auch XB2!

structconst

//Default-EEPROM-Werte:
{$EEPROM}
  EE_dummy:LongInt = 0;
  EE_initialised:word = $AA55;

  EE_OptionArray:Array[0..19] of Integer =  (
  255,  // 200 BIN-File Default, 255=keine
  255,  // 201 INI-File Default
  0,    // 202 AutoIncSel, default 0
  128,  // 203 AutoIncReg, default 128
  0,    // 204
  0,    // 205
  4,    // 206 EE_InitIncRast
  51,   // 207 EE_SerBaudReg
  9,    // 208 EE_MainCh
  500,  // 209 EE_getTimeOut
  0,    // 210
  0,    // 211
  0,    // 212
  0,    // 213
  0,    // 214
  0,    // 215
  0,    // 216
  0,
  0,
  0);


  EE_InitFileName:String[15] = 'AST_CLK.BIT';
  EE_DatFileName:String[15] = 'DATAFILE.XLS';
  EE_DestDayCount : Integer = 8582; // Tage seit 1.1.2020

{--------------------------------------------------------------}

var
{$EEPROM}
  EE_InitParamLongArray: array[0..3] of LongInt;
  
  EE_BinFileNum[@EE_OptionArray+0]:integer;      // unused!
  EE_IniFileNum[@EE_OptionArray+2]:integer;      // INI-FileNum -1 (kein INI-File)
  EE_AutoIncSel[@EE_OptionArray+4]:integer;      // Default AutoIncSel
  EE_AutoIncReg[@EE_OptionArray+6]:integer;      // Default AutoIncReg

  EE_InitIncRast[@EE_OptionArray+12]:Integer;
  EE_SerBaudReg[@EE_OptionArray+14]:Integer;
  EE_MainCh[@EE_OptionArray+16]:integer;
  EE_GetTimeOut[@EE_OptionArray+18]:integer;



{$DATA} {Schnelle Register-Variablen}


{$IDATA}  {Langsamere SRAM-Variablen}
  i, n, m: Byte;
  InvertZ: Boolean;
  BlankZ, DelayZ: Integer;

var
  MainCh: byte;
  ButtonTemp,RangeTemp: Byte; // invertiert - low=on!
  ButtonDown[@ButtonTemp, 5]  : bit;
  ButtonUp[@ButtonTemp, 4]  : bit;
  ButtonEnter[@ButtonTemp, 3]  : bit;

  DisplayTimer:Systimer8;
  IncrTimer, PanelTimer, ACKTimer:Systimer8;

  CmdWhich: byte; // tcmdwhich nicht mehr benutzt
  CmdStr: string[3];
  SubCh: Integer;
  CurrentCh       : byte;
  OmniFlag,verbose: boolean;
  ParamInt:  Integer;
  ParamAlpha: boolean; // Flag für Zeichenfolge hinter "="
  ParamLong: LongInt;
  ParamByte, ParamDigit :Byte;

  ParamLongArray: array[0..3] of LongInt;
  InputLongArray: array[0..3] of LongInt;
  SerInpStr : String[31];
  SerInpPtr: byte;

  LCDpresent, ButtonsPresent: boolean;
  Modify: tModify;
  IncrValue, OldIncrValue: Integer;
  SelectDigit,FirstTurn: Boolean;
  IncrDiff,IncrAccInt10, IncRast: Integer;
  IncrDiffByte:Byte;
  ChangedFlag: Boolean;

//für Parser
  ParamStr: string[31]; // auch für Display
  isInteger,Request: boolean;
  Status: byte;  // 0..3 Fehlernummer
  BusyFlag[@Status, 7]: bit;
  UserSRQFlag[@Status, 6]: bit;
  FileErrorFlag[@Status, 5]: bit;  //
  EEUnlocked[@Status, 4]: bit; // EEPROM-unlocked-Flag

{  FaultStrArr : array[0..3] of String[10] = (
    '[READERR]',
    '[NOCARD]',
    '[CONFERR]',
    '[WRITERR]');  }

  FaultFlags, ButtonNumber: byte;
  ReadErr[@FaultFlags, 0]  : bit;

  ConfErr[@FaultFlags, 2]  : bit;
  WriteErr[@FaultFlags, 3]  : bit;

  ErrCount:integer;
  ErrFlag:boolean;
  FaultTimerByte:Byte;
  NoINIfound:Boolean;  // Flag für INI-Dateien
  ByteCount: LongInt;
  byteCount3[@ByteCount+3]:byte;
  byteCount2[@ByteCount+2]:byte;
  byteCount1[@ByteCount+1]:byte;
  byteCount0[@ByteCount]:byte;

  ParseResult: Boolean;
  TransferCh: byte;
  TransferSubCh: Integer;
  Pause: word;

  GetTimeout: Integer;
  GETwaitFlag:Boolean;

  AutoIncReg:byte;         // Auto-Increment-Register, hierhin werden .DAT-Datenblöcke geschrieben
  AutoIncSel:byte;         // Auto-Increment-Select
  AutoIncWidth:byte;       // AI Breite in Bytes, 1, 2 oder 4
// Real Time Clock RTC
  DOStime, DOSdate: Word;

  pDummy:byte;
  SPIsema:Boolean;
  IRQrBufPtr,rBufPtr, IRQtemp:byte;
  AutoIncBlockEnd,AutoIncBlockStart: LongInt;

  CardOK: boolean;
  DirectoryArray:array[0..31] of string[12];
  DirectoryDone, FlashOK:Boolean;

  BinFile : file of byte;
  InitFile, MemFile, DataFile : file of text;
  INITfileIsOpen, LabelSeek: Boolean;
  FileNum, FileAnzahl, FileNumTemp : byte;

  InitScopeClockDone, InitScopeClockRequest: Boolean;

implementation
// #############################################################################

procedure ClearDirectory;
begin
  for i:=0 to 31 do
    DirectoryArray[i]:='<empty>';
  endfor;
  FileNum:=0;
  DirectoryDone:=false; // einlesen des Directory beim nächsten FileSel
end;


procedure InitVars;
//Frequenz und Settings aus EEPROM holen
begin
  for i:= 0 to 3 do
    ParamLongArray[i]:=EE_InitParamLongArray[i];
  endfor;
  IncRast:=EE_InitIncRast;
  ParamStr:='0';
  ClearDirectory;
  GetTimeout:=EE_getTimeOut;
  AutoIncReg:=byte(EE_AutoIncReg);
  AutoIncSel:=byte(EE_AutoIncSel);
  AutoIncWidth:=4;
  IRQrBufPtr:=0;
  rBufPtr:=0;
end;

function ButtonPressed:Boolean;
begin
  if LCDpresent then
    ButtonTemp := (LCDportInp_M(LCD_m1) or %11000111);
  else
    return(false);
  endif;
  if ButtonTemp=$ff then
    return(false);
  else
    return(true);
  endif;
end;

procedure DateTimeToDOS;
{ DOS time format bits:
DOStime: 15..11=Hours (0-23), 10..5=Minutes (0-59), 4..0=Seconds/2 (0-29)
DOSdate: 15..9=Year (0=1980, 127=2107), 8..5=Month (1=January, 12=December),
4..0=Day (1-31) }
begin
  DS_GetTime(second, minute, hour, pm);
  DS_GetDate(weekday, day, month, year);
  DOStime:= (word(Hour) shl 11) or (word(Minute) shl 5) or (word(Second) shr 1);
  DOSdate:= (word(Year+20) shl 9) or (word(Month) shl 5) or (word(Day));
end;

procedure TimeToParamStr;
begin
  ParamStr:= byteToStr(Hour:2:'0')+':'+byteToStr(Minute:2:'0')+':'+byteToStr(Second:2:'0');
end;

procedure DateToParamStr;
begin
  ParamStr:= byteToStr(Day:2:'0')+'.'+byteToStr(Month:2:'0')+'.'+byteToStr(Year:2:'0');
end;


procedure SerCRLF;
begin
  SerOut(#$0D);
  SerOut(#$0A);
end;

end global_vars.

